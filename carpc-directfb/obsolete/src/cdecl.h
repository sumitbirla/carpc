#include <unistd.h>#include <time.h>#include <directfb.h>#include <stdio.h> #include <stdlib.h>#include <string.h>#include <pthread.h>#define NUM_MODULES      5#define SCREEN_WIDTH     640#define SCREEN_HEIGHT    480#define MARGIN           2#define BUTTON_WIDTH     68#define BUTTON_HEIGHT    68#define MENU_ITEM_WIDTH  (SCREEN_WIDTH - BUTTON_WIDTH - (MARGIN*5))/3#define MENU_ITEM_HEIGHT (SCREEN_HEIGHT - 60 - (MARGIN*4))/3#define MUTE            0#define UP              1#define DOWN            2#define LEFT            3#define RIGHT           4#define MENU            5#define QUIT            6#define BLANK           101#define RADIO           102#define MP3             103#define VIDEO           104#define GPS             105#define OBDII           106#define SYSTEM          107#define DEV_MIXER       "/dev/mixer"#define MAX_VOLUME      95#define MIN_VOLUME      00class CarApp {public:   IDirectFB *dfb;   IDirectFBSurface *client_surface;   //CarModule car_modules[NUM_MODULES];private:    IDirectFBSurface *background, *primary;    IDirectFBDisplayLayer  *layer;    IDirectFBFont *button_font;      int current_selection;    int mouse_x, mouse_y;    int quit;    class CarModule  *currentModule;    class CarModule  *carDefault;    class CarMenu *carMenu;    class CarRadio *carRadio;    class CarMP3  *carMp3;    class CarOBDII *carObdii;    class VolumeControl *sound;public:    CarApp::CarApp(int argc, char *argv[]);    CarApp::~CarApp();    void run_event_loop();    void draw_skeleton();    void draw_buttons(int selection);    void set_current_selection(int selection);    int get_current_selection();    void draw_current_selection();private:    void mouse_pressed(int x, int y);    void mouse_released(int x, int y);};class CarModule {public:   CarModule(CarApp *main);//   virtual void process();   virtual void draw();   virtual void mouse_pressed(int x, int y) {};   virtual void mouse_released(int x, int y) {};   virtual void action_right() {};   virtual void action_left() {};protected:   IDirectFBSurface *surface;   CarApp *app;private:   IDirectFBFont *font;};class CarMenu: public CarModule {private:   int item_width, item_height;   static const char *menu[3][3];   IDirectFBFont *menu_font;  public:   CarMenu(CarApp *main);   void draw();   void mouse_pressed(int x, int y);   void mouse_released(int x, int y);private:   void draw_menu(int i, int j); };class CarRadio: public CarModule {private:  int item_width, item_height;   int prev_channel, channel;   IDirectFBFont *radio_font;   static const char * channels[];   public:   CarRadio(CarApp *main);   ~CarRadio();   void draw();   void mouse_pressed(int x, int y);   void mouse_released(int x, int y) {};   void action_right();   void action_left();};typedef struct mp3file{   char     name[256];   char     artist[32];   char     title[32];   struct mp3file *next;} MP3File;class CarMP3: public CarModule {private:   int item_width, item_height;   IDirectFBFont *font;   MP3File *ptr, *cur, *head;public:   CarMP3(CarApp *main);   ~CarMP3();   void draw();   void mouse_pressed(int x, int y);   void action_right();   void action_left();private:   void draw(int selection);};class CarOBDII: public CarModule {private:   IDirectFBFont *obdii_font;   char     speed[4];   char     speed_display[9];   char     units[6];   char     rpm[6];   int      isBrit;   int      isObdiiRunning;   char     units_brit[6];   char     units_metric[6];   //CarOBDII *parent_carObdii, *tgt_carObdii;                      void wakeup_ecu();  public:   pthread_t obdii_interface_thread;   CarOBDII(CarApp *main);   ~CarOBDII();   void draw();   void mouse_pressed(int x, int y);   void mouse_released(int x, int y);   void action_right();   void action_left();   void start_obdii_interface();   void request_ecu_data();   //   void process();   //void* poll_ecu(void *a);};typedef struct stereovolume{   unsigned char left;   unsigned char right;} StereoVolume;class VolumeControl {private:   StereoVolume volume;   int mixer_fd, mute;   int master_vol;    public:   VolumeControl();   ~VolumeControl();   void toggle_mute();   int is_mute();   void volume_up();   void volume_down();   void set_volume(int vol);   int get_volume();};